"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;
const error_1 = require("../../error");
const auth_provider_1 = require("./auth_provider");
const aws_service_workflow_1 = require("./mongodb_oidc/aws_service_workflow");
const callback_workflow_1 = require("./mongodb_oidc/callback_workflow");
/** @internal */
exports.OIDC_WORKFLOWS = new Map();
exports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());
exports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());
/**
 * OIDC auth provider.
 */
class MongoDBOIDC extends auth_provider_1.AuthProvider {
    /**
     * Instantiate the auth provider.
     */
    constructor() {
        super();
    }
    /**
     * Authenticate using OIDC
     */
    auth(authContext, callback) {
        const { connection, credentials, response } = authContext;
        if (response?.speculativeAuthenticate) {
            return callback();
        }
        if (!credentials) {
            return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));
        }
        getWorkflow(credentials, (error, workflow) => {
            if (error) {
                return callback(error);
            }
            if (!workflow) {
                return callback(new error_1.MongoRuntimeError(`Could not load workflow for device ${credentials.mechanismProperties.PROVIDER_NAME}`));
            }
            workflow.execute(connection, credentials).then(result => {
                return callback(undefined, result);
            }, error => {
                callback(error);
            });
        });
    }
    /**
     * Add the speculative auth for the initial handshake.
     */
    prepare(handshakeDoc, authContext, callback) {
        const { credentials } = authContext;
        if (!credentials) {
            return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));
        }
        getWorkflow(credentials, (error, workflow) => {
            if (error) {
                return callback(error);
            }
            if (!workflow) {
                return callback(new error_1.MongoRuntimeError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`));
            }
            workflow.speculativeAuth().then(result => {
                return callback(undefined, { ...handshakeDoc, ...result });
            }, error => {
                callback(error);
            });
        });
    }
}
exports.MongoDBOIDC = MongoDBOIDC;
/**
 * Gets either a device workflow or callback workflow.
 */
function getWorkflow(credentials, callback) {
    const providerName = credentials.mechanismProperties.PROVIDER_NAME;
    const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');
    if (!workflow) {
        return callback(new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`));
    }
    callback(undefined, workflow);
}
//# sourceMappingURL=mongodb_oidc.js.map